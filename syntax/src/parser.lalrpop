use std::str::FromStr;
use ast::{Expr, Lispy, Arith, Number, Symbol, Builtin};

grammar;

pub Lispy: Lispy = {
    <e:Expr*> => <>
};

Expr: Expr = {
    Num => Expr::Val(<>),
    Sym => Expr::Sym(<>),
    Sexpr => Expr::Sexp(<>),
    Qexpr => Expr::Qexp(<>),
};

Sexpr: Vec<Expr> = {
    "(" <e:Expr*> ")" => <>
};

Qexpr: Vec<Expr> = {
    "{" <e:Expr*> "}" => <>
}

Sym: Symbol = {
    "+" => Symbol::Arith(Arith::Add),
    "-" => Symbol::Arith(Arith::Sub),
    "*" => Symbol::Arith(Arith::Mul),
    "/" => Symbol::Arith(Arith::Div),
    "%" => Symbol::Arith(Arith::Mod),
    "head" => Symbol::Builtin(Builtin::Head),
    "tail" => Symbol::Builtin(Builtin::Tail),
    "list" => Symbol::Builtin(Builtin::List),
    "eval" => Symbol::Builtin(Builtin::Eval),
    "join" => Symbol::Builtin(Builtin::Join),
    "len" => Symbol::Builtin(Builtin::Len),
    "def" => Symbol::Builtin(Builtin::Def),
    <v:Var> => Symbol::Var(<>),
};

Num: Number = {
    Decimal => f64::from_str(<>).unwrap(),
    Integral => f64::from_str(<>).unwrap()
};

Var: String = {
    Identifier => <>.to_string()
};

match {
    r"[0-9]+\.[0-9]+" => Decimal,
    r"[0-9]+" => Integral,
} else {
    // Hacky way to handle keywords.
    r"[a-zA-Z0-9_]+" => Identifier,
    _
}
