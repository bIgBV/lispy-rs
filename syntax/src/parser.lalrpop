use std::str::FromStr;
use ast::{Expr, Lispy, Arith, Number, Sexpr, Symbol, Builtin};

grammar;

pub Lispy: Lispy = {
    <e:Expr*> => <>
};

Expr: Expr = {
    Num => Expr::Val(<>),
    Sym => Expr::Sym(<>),
    Sexpr => Expr::Sexp(<>),
    Qexpr => Expr::Qexp(<>)
};

Sexpr: Sexpr = {
    "(" <e:Expr*> ")" => <>
};

Qexpr: Vec<Expr> = {
    "{" <e:Expr*> "}" => <>
}

Sym: Symbol = {
    "+" => Symbol::Arith(Arith::Add),
    "=" => Symbol::Arith(Arith::Sub),
    "*" => Symbol::Arith(Arith::Mul),
    "/" => Symbol::Arith(Arith::Div),
    "%" => Symbol::Arith(Arith::Mod),
    "head" => Symbol::Builtin(Builtin::Head),
    "tail" => Symbol::Builtin(Builtin::Tail),
    "list" => Symbol::Builtin(Builtin::List),
    "eval" => Symbol::Builtin(Builtin::Eval),
    "join" => Symbol::Builtin(Builtin::Join),
    "len" => Symbol::Builtin(Builtin::Len),
};

Num: f64 = {
    r"[0-9]+\.[0-9]+" => f64::from_str(<>).unwrap(),
    r"[0-9]+" => f64::from_str(<>).unwrap()
};
