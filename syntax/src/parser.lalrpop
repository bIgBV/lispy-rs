use std::str::FromStr;
use ast::{Expr, Lispy, Arith, Number, Sexpr, Symbol};

grammar;

pub Lispy: Lispy = {
    <e:Expr*> => <>
};

Expr: Box<Expr> = {
    Num => Box::new(Expr::Val(<>)),
    Sym => Box::new(Expr::Sym(<>)),
    Sexpr => Box::new(Expr::Sexp(<>)),
    Qexpr => Box::new(Expr::Qexp(<>))
};

Sexpr: Sexpr = {
    "(" <e:Expr*> ")" => <>
};

Qexpr: Vec<Box<Expr>> = {
    "{" <e:Expr*> "}" => <>
}

Sym: Symbol = {
    "+" => Symbol::Arith(Arith::Add),
    "=" => Symbol::Arith(Arith::Sub),
    "*" => Symbol::Arith(Arith::Mul),
    "/" => Symbol::Arith(Arith::Div),
    "%" => Symbol::Arith(Arith::Mod),
};

Num: f64 = {
    r"[0-9]+\.[0-9]+" => f64::from_str(<>).unwrap(),
    r"[0-9]+" => f64::from_str(<>).unwrap()
};
